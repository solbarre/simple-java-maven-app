@Library("deployment") _

properties([
  buildDiscarder(logRotator(numToKeepStr: "10")),
  parameters([
        string(name: 'VERSION', defaultValue: "${params['VERSION']}", description: 'version de la release à construire (format : X.Y.Z)', trim: true),
        choice(name: 'ENVIRONMENT', choices: ['prod', 'dev'], description: 'répertoire de destination des artefacts de release sur Artifactory (dev ou prod)'),
  ]),
])


testArgs {
  version: $VERSION,
  env: $ENVIRONMENT,
}

timestamps {
    ansiColor('xterm') {
		agent {
			docker {
				image 'maven:3.8.1-adoptopenjdk-11'
				args '-v /root/.m2:/root/.m2'
			}
		}
		options {
			skipStagesAfterUnstable()
		}
		environment {
			NEXUS_VERSION = "nexus3"
			NEXUS_PROTOCOL = "http"
			NEXUS_URL = "192.168.1.83:9091"
			NEXUS_REPOSITORY = "maven-uni-repo"
			NEXUS_CREDENTIAL_ID = "NEXUS-UNI"
		}
		stages {
			stage('Build') {
				steps {
					sh 'mvn -B -DskipTests clean package'
				}
			}
			stage('Test') {
				steps {
					sh 'mvn test'
				}
				post {
					always {
						junit 'target/surefire-reports/*.xml'
					}
				}
			}
			/*
			stage('Sonarqube') {
			   environment {
				  scannerHome = tool 'SonarQubeScanner'
			   }
			   steps {
				  withSonarQubeEnv('sonarqube') {
					 sh "${scannerHome}/bin/sonar-scanner"
				  }
				  timeout(time: 10, unit: 'MINUTES') {
					 waitForQualityGate abortPipeline: true
				  }
			   }
			}
			*/
			stage("Publish to Nexus Repository Manager") {
				steps {
					script {
						pom = readMavenPom file: "pom.xml";
						filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
						echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
						artifactPath = filesByGlob[0].path;
						artifactExists = fileExists artifactPath;
						if(artifactExists) {
							echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
							nexusArtifactUploader(
								nexusVersion: NEXUS_VERSION,
								protocol: NEXUS_PROTOCOL,
								nexusUrl: NEXUS_URL,
								groupId: "pom.groupId",
								version: "pom.version",
								repository: NEXUS_REPOSITORY,
								credentialsId: NEXUS_CREDENTIAL_ID,
								artifacts: [
									[artifactId: 'pom.artifactId',
									classifier: '',
									file: artifactPath,
									type: pom.packaging],
									[artifactId: pom.artifactId,
									classifier: '',
									file: "pom.xml",
									type: "pom"]
								]
							);
						} else {
							error "*** File: ${artifactPath}, could not be found";
						}
					}
				}
			}
		}
	}
}
